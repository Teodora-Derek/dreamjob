/*
 * This file is generated by jOOQ.
 */
package com.dreamjob.db.jooq;


import com.dreamjob.db.jooq.tables.AdminActionLog;
import com.dreamjob.db.jooq.tables.Administrator;
import com.dreamjob.db.jooq.tables.City;
import com.dreamjob.db.jooq.tables.Offer;
import com.dreamjob.db.jooq.tables.Profession;
import com.dreamjob.db.jooq.tables.TraderDetails;
import com.dreamjob.db.jooq.tables.TraderDetailsProfession;
import com.dreamjob.db.jooq.tables.UserDetails;
import com.dreamjob.db.jooq.tables.records.AdminActionLogRecord;
import com.dreamjob.db.jooq.tables.records.AdministratorRecord;
import com.dreamjob.db.jooq.tables.records.CityRecord;
import com.dreamjob.db.jooq.tables.records.OfferRecord;
import com.dreamjob.db.jooq.tables.records.ProfessionRecord;
import com.dreamjob.db.jooq.tables.records.TraderDetailsProfessionRecord;
import com.dreamjob.db.jooq.tables.records.TraderDetailsRecord;
import com.dreamjob.db.jooq.tables.records.UserDetailsRecord;

import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdminActionLogRecord> ADMIN_ACTION_LOG_PKEY = Internal.createUniqueKey(AdminActionLog.ADMIN_ACTION_LOG, DSL.name("admin_action_log_pkey"), new TableField[] { AdminActionLog.ADMIN_ACTION_LOG.ID }, true);
    public static final UniqueKey<AdministratorRecord> ADMINISTRATOR_EMAIL_KEY = Internal.createUniqueKey(Administrator.ADMINISTRATOR, DSL.name("administrator_email_key"), new TableField[] { Administrator.ADMINISTRATOR.EMAIL }, true);
    public static final UniqueKey<AdministratorRecord> ADMINISTRATOR_PKEY = Internal.createUniqueKey(Administrator.ADMINISTRATOR, DSL.name("administrator_pkey"), new TableField[] { Administrator.ADMINISTRATOR.ID }, true);
    public static final UniqueKey<AdministratorRecord> ADMINISTRATOR_USERNAME_KEY = Internal.createUniqueKey(Administrator.ADMINISTRATOR, DSL.name("administrator_username_key"), new TableField[] { Administrator.ADMINISTRATOR.USERNAME }, true);
    public static final UniqueKey<CityRecord> CITY_CITY_NAME_KEY = Internal.createUniqueKey(City.CITY, DSL.name("city_city_name_key"), new TableField[] { City.CITY.CITY_NAME }, true);
    public static final UniqueKey<CityRecord> CITY_PKEY = Internal.createUniqueKey(City.CITY, DSL.name("city_pkey"), new TableField[] { City.CITY.ID }, true);
    public static final UniqueKey<OfferRecord> OFFER_PKEY = Internal.createUniqueKey(Offer.OFFER, DSL.name("offer_pkey"), new TableField[] { Offer.OFFER.ID }, true);
    public static final UniqueKey<ProfessionRecord> PROFESSION_PKEY = Internal.createUniqueKey(Profession.PROFESSION, DSL.name("profession_pkey"), new TableField[] { Profession.PROFESSION.ID }, true);
    public static final UniqueKey<TraderDetailsRecord> TRADER_DETAILS_PKEY = Internal.createUniqueKey(TraderDetails.TRADER_DETAILS, DSL.name("trader_details_pkey"), new TableField[] { TraderDetails.TRADER_DETAILS.ID }, true);
    public static final UniqueKey<TraderDetailsRecord> TRADER_DETAILS_USER_ID_KEY = Internal.createUniqueKey(TraderDetails.TRADER_DETAILS, DSL.name("trader_details_user_id_key"), new TableField[] { TraderDetails.TRADER_DETAILS.USER_ID }, true);
    public static final UniqueKey<TraderDetailsProfessionRecord> TRADER_DETAILS_PROFESSION_PKEY = Internal.createUniqueKey(TraderDetailsProfession.TRADER_DETAILS_PROFESSION, DSL.name("trader_details_profession_pkey"), new TableField[] { TraderDetailsProfession.TRADER_DETAILS_PROFESSION.PROFESSION_ID, TraderDetailsProfession.TRADER_DETAILS_PROFESSION.TRADER_ID }, true);
    public static final UniqueKey<UserDetailsRecord> USER_DETAILS_EMAIL_KEY = Internal.createUniqueKey(UserDetails.USER_DETAILS, DSL.name("user_details_email_key"), new TableField[] { UserDetails.USER_DETAILS.EMAIL }, true);
    public static final UniqueKey<UserDetailsRecord> USER_DETAILS_PKEY = Internal.createUniqueKey(UserDetails.USER_DETAILS, DSL.name("user_details_pkey"), new TableField[] { UserDetails.USER_DETAILS.ID }, true);
    public static final UniqueKey<UserDetailsRecord> USER_DETAILS_USERNAME_KEY = Internal.createUniqueKey(UserDetails.USER_DETAILS, DSL.name("user_details_username_key"), new TableField[] { UserDetails.USER_DETAILS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AdminActionLogRecord, AdministratorRecord> ADMIN_ACTION_LOG__FK_ADMIN_ACTION_LOG_ADMINISTRATOR_ID = Internal.createForeignKey(AdminActionLog.ADMIN_ACTION_LOG, DSL.name("fk_admin_action_log_administrator_id"), new TableField[] { AdminActionLog.ADMIN_ACTION_LOG.ADMIN_ID }, Keys.ADMINISTRATOR_PKEY, new TableField[] { Administrator.ADMINISTRATOR.ID }, true);
    public static final ForeignKey<OfferRecord, CityRecord> OFFER__FK_OFFER_CITY_ID = Internal.createForeignKey(Offer.OFFER, DSL.name("fk_offer_city_id"), new TableField[] { Offer.OFFER.CITY_ID }, Keys.CITY_PKEY, new TableField[] { City.CITY.ID }, true);
    public static final ForeignKey<OfferRecord, ProfessionRecord> OFFER__FK_OFFER_PROFESSION_ID = Internal.createForeignKey(Offer.OFFER, DSL.name("fk_offer_profession_id"), new TableField[] { Offer.OFFER.PROFESSION_ID }, Keys.PROFESSION_PKEY, new TableField[] { Profession.PROFESSION.ID }, true);
    public static final ForeignKey<OfferRecord, TraderDetailsRecord> OFFER__FK_OFFER_TRADER_DETAILS_ID = Internal.createForeignKey(Offer.OFFER, DSL.name("fk_offer_trader_details_id"), new TableField[] { Offer.OFFER.TRADER_ID }, Keys.TRADER_DETAILS_PKEY, new TableField[] { TraderDetails.TRADER_DETAILS.ID }, true);
    public static final ForeignKey<TraderDetailsRecord, UserDetailsRecord> TRADER_DETAILS__FK_TRADER_DETAILS_USER_DETAILS_ID = Internal.createForeignKey(TraderDetails.TRADER_DETAILS, DSL.name("fk_trader_details_user_details_id"), new TableField[] { TraderDetails.TRADER_DETAILS.USER_ID }, Keys.USER_DETAILS_PKEY, new TableField[] { UserDetails.USER_DETAILS.ID }, true);
    public static final ForeignKey<TraderDetailsProfessionRecord, ProfessionRecord> TRADER_DETAILS_PROFESSION__FK_TRADER_DETAILS_PROFESSION_PROFESSION_ID = Internal.createForeignKey(TraderDetailsProfession.TRADER_DETAILS_PROFESSION, DSL.name("fk_trader_details_profession_profession_id"), new TableField[] { TraderDetailsProfession.TRADER_DETAILS_PROFESSION.PROFESSION_ID }, Keys.PROFESSION_PKEY, new TableField[] { Profession.PROFESSION.ID }, true);
    public static final ForeignKey<TraderDetailsProfessionRecord, TraderDetailsRecord> TRADER_DETAILS_PROFESSION__FK_TRADER_DETAILS_PROFESSION_TRADER_DETAILS_ID = Internal.createForeignKey(TraderDetailsProfession.TRADER_DETAILS_PROFESSION, DSL.name("fk_trader_details_profession_trader_details_id"), new TableField[] { TraderDetailsProfession.TRADER_DETAILS_PROFESSION.TRADER_ID }, Keys.TRADER_DETAILS_PKEY, new TableField[] { TraderDetails.TRADER_DETAILS.ID }, true);
}

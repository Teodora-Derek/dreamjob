/*
 * This file is generated by jOOQ.
 */
package com.dreamjob.db.jooq.tables;


import com.dreamjob.db.jooq.DefaultSchema;
import com.dreamjob.db.jooq.Indexes;
import com.dreamjob.db.jooq.Keys;
import com.dreamjob.db.jooq.tables.records.TraderDetailsProfessionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TraderDetailsProfession extends TableImpl<TraderDetailsProfessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trader_details_profession</code>
     */
    public static final TraderDetailsProfession TRADER_DETAILS_PROFESSION = new TraderDetailsProfession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TraderDetailsProfessionRecord> getRecordType() {
        return TraderDetailsProfessionRecord.class;
    }

    /**
     * The column <code>trader_details_profession.trader_id</code>.
     */
    public final TableField<TraderDetailsProfessionRecord, Integer> TRADER_ID = createField(DSL.name("trader_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trader_details_profession.profession_id</code>.
     */
    public final TableField<TraderDetailsProfessionRecord, Integer> PROFESSION_ID = createField(DSL.name("profession_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trader_details_profession.created_on</code>.
     */
    public final TableField<TraderDetailsProfessionRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>trader_details_profession.updated_on</code>.
     */
    public final TableField<TraderDetailsProfessionRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    private TraderDetailsProfession(Name alias, Table<TraderDetailsProfessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TraderDetailsProfession(Name alias, Table<TraderDetailsProfessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trader_details_profession</code> table reference
     */
    public TraderDetailsProfession(String alias) {
        this(DSL.name(alias), TRADER_DETAILS_PROFESSION);
    }

    /**
     * Create an aliased <code>trader_details_profession</code> table reference
     */
    public TraderDetailsProfession(Name alias) {
        this(alias, TRADER_DETAILS_PROFESSION);
    }

    /**
     * Create a <code>trader_details_profession</code> table reference
     */
    public TraderDetailsProfession() {
        this(DSL.name("trader_details_profession"), null);
    }

    public <O extends Record> TraderDetailsProfession(Table<O> child, ForeignKey<O, TraderDetailsProfessionRecord> key) {
        super(child, key, TRADER_DETAILS_PROFESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRADER_DETAILS_PROFESSION_PROFESSION_ID);
    }

    @Override
    public UniqueKey<TraderDetailsProfessionRecord> getPrimaryKey() {
        return Keys.TRADER_DETAILS_PROFESSION_PKEY;
    }

    @Override
    public List<ForeignKey<TraderDetailsProfessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRADER_DETAILS_PROFESSION__FK_TRADER_DETAILS_PROFESSION_TRADER_DETAILS_ID, Keys.TRADER_DETAILS_PROFESSION__FK_TRADER_DETAILS_PROFESSION_PROFESSION_ID);
    }

    private transient TraderDetails _traderDetails;
    private transient Profession _profession;

    /**
     * Get the implicit join path to the <code>public.trader_details</code>
     * table.
     */
    public TraderDetails traderDetails() {
        if (_traderDetails == null)
            _traderDetails = new TraderDetails(this, Keys.TRADER_DETAILS_PROFESSION__FK_TRADER_DETAILS_PROFESSION_TRADER_DETAILS_ID);

        return _traderDetails;
    }

    /**
     * Get the implicit join path to the <code>public.profession</code> table.
     */
    public Profession profession() {
        if (_profession == null)
            _profession = new Profession(this, Keys.TRADER_DETAILS_PROFESSION__FK_TRADER_DETAILS_PROFESSION_PROFESSION_ID);

        return _profession;
    }

    @Override
    public TraderDetailsProfession as(String alias) {
        return new TraderDetailsProfession(DSL.name(alias), this);
    }

    @Override
    public TraderDetailsProfession as(Name alias) {
        return new TraderDetailsProfession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TraderDetailsProfession rename(String name) {
        return new TraderDetailsProfession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TraderDetailsProfession rename(Name name) {
        return new TraderDetailsProfession(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}

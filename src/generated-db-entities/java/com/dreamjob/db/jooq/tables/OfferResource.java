/*
 * This file is generated by jOOQ.
 */
package com.dreamjob.db.jooq.tables;


import com.dreamjob.db.jooq.DefaultSchema;
import com.dreamjob.db.jooq.Keys;
import com.dreamjob.db.jooq.tables.records.OfferResourceRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfferResource extends TableImpl<OfferResourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>offer_resource</code>
     */
    public static final OfferResource OFFER_RESOURCE = new OfferResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfferResourceRecord> getRecordType() {
        return OfferResourceRecord.class;
    }

    /**
     * The column <code>offer_resource.id</code>.
     */
    public final TableField<OfferResourceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>offer_resource.offer_id</code>.
     */
    public final TableField<OfferResourceRecord, Integer> OFFER_ID = createField(DSL.name("offer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>offer_resource.resource_id</code>.
     */
    public final TableField<OfferResourceRecord, Integer> RESOURCE_ID = createField(DSL.name("resource_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>offer_resource.quantity</code>.
     */
    public final TableField<OfferResourceRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>offer_resource.unit_price</code>.
     */
    public final TableField<OfferResourceRecord, BigDecimal> UNIT_PRICE = createField(DSL.name("unit_price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>offer_resource.total_cost</code>.
     */
    public final TableField<OfferResourceRecord, BigDecimal> TOTAL_COST = createField(DSL.name("total_cost"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>offer_resource.created_on</code>.
     */
    public final TableField<OfferResourceRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>offer_resource.updated_on</code>.
     */
    public final TableField<OfferResourceRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    private OfferResource(Name alias, Table<OfferResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private OfferResource(Name alias, Table<OfferResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>offer_resource</code> table reference
     */
    public OfferResource(String alias) {
        this(DSL.name(alias), OFFER_RESOURCE);
    }

    /**
     * Create an aliased <code>offer_resource</code> table reference
     */
    public OfferResource(Name alias) {
        this(alias, OFFER_RESOURCE);
    }

    /**
     * Create a <code>offer_resource</code> table reference
     */
    public OfferResource() {
        this(DSL.name("offer_resource"), null);
    }

    public <O extends Record> OfferResource(Table<O> child, ForeignKey<O, OfferResourceRecord> key) {
        super(child, key, OFFER_RESOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<OfferResourceRecord, Integer> getIdentity() {
        return (Identity<OfferResourceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OfferResourceRecord> getPrimaryKey() {
        return Keys.OFFER_RESOURCE_PKEY;
    }

    @Override
    public List<ForeignKey<OfferResourceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OFFER_RESOURCE__FK_OFFER_RESOURCE_OFFER_ID, Keys.OFFER_RESOURCE__FK_OFFER_RESOURCE_RESOURCE_ID);
    }

    private transient Offer _offer;
    private transient Resource _resource;

    /**
     * Get the implicit join path to the <code>public.offer</code> table.
     */
    public Offer offer() {
        if (_offer == null)
            _offer = new Offer(this, Keys.OFFER_RESOURCE__FK_OFFER_RESOURCE_OFFER_ID);

        return _offer;
    }

    /**
     * Get the implicit join path to the <code>public.resource</code> table.
     */
    public Resource resource() {
        if (_resource == null)
            _resource = new Resource(this, Keys.OFFER_RESOURCE__FK_OFFER_RESOURCE_RESOURCE_ID);

        return _resource;
    }

    @Override
    public OfferResource as(String alias) {
        return new OfferResource(DSL.name(alias), this);
    }

    @Override
    public OfferResource as(Name alias) {
        return new OfferResource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OfferResource rename(String name) {
        return new OfferResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OfferResource rename(Name name) {
        return new OfferResource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, BigDecimal, BigDecimal, BigDecimal, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}

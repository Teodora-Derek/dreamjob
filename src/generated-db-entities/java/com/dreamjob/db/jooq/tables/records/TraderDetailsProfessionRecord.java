/*
 * This file is generated by jOOQ.
 */
package com.dreamjob.db.jooq.tables.records;


import com.dreamjob.db.jooq.tables.TraderDetailsProfession;

import java.beans.ConstructorProperties;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TraderDetailsProfessionRecord extends UpdatableRecordImpl<TraderDetailsProfessionRecord> implements Record4<Integer, Integer, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>trader_details_profession.trader_id</code>.
     */
    public TraderDetailsProfessionRecord setTraderId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>trader_details_profession.trader_id</code>.
     */
    public Integer getTraderId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>trader_details_profession.profession_id</code>.
     */
    public TraderDetailsProfessionRecord setProfessionId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>trader_details_profession.profession_id</code>.
     */
    public Integer getProfessionId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>trader_details_profession.created_on</code>.
     */
    public TraderDetailsProfessionRecord setCreatedOn(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>trader_details_profession.created_on</code>.
     */
    public LocalDateTime getCreatedOn() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>trader_details_profession.updated_on</code>.
     */
    public TraderDetailsProfessionRecord setUpdatedOn(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>trader_details_profession.updated_on</code>.
     */
    public LocalDateTime getUpdatedOn() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return TraderDetailsProfession.TRADER_DETAILS_PROFESSION.TRADER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return TraderDetailsProfession.TRADER_DETAILS_PROFESSION.PROFESSION_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return TraderDetailsProfession.TRADER_DETAILS_PROFESSION.CREATED_ON;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return TraderDetailsProfession.TRADER_DETAILS_PROFESSION.UPDATED_ON;
    }

    @Override
    public Integer component1() {
        return getTraderId();
    }

    @Override
    public Integer component2() {
        return getProfessionId();
    }

    @Override
    public LocalDateTime component3() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime component4() {
        return getUpdatedOn();
    }

    @Override
    public Integer value1() {
        return getTraderId();
    }

    @Override
    public Integer value2() {
        return getProfessionId();
    }

    @Override
    public LocalDateTime value3() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime value4() {
        return getUpdatedOn();
    }

    @Override
    public TraderDetailsProfessionRecord value1(Integer value) {
        setTraderId(value);
        return this;
    }

    @Override
    public TraderDetailsProfessionRecord value2(Integer value) {
        setProfessionId(value);
        return this;
    }

    @Override
    public TraderDetailsProfessionRecord value3(LocalDateTime value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public TraderDetailsProfessionRecord value4(LocalDateTime value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public TraderDetailsProfessionRecord values(Integer value1, Integer value2, LocalDateTime value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TraderDetailsProfessionRecord
     */
    public TraderDetailsProfessionRecord() {
        super(TraderDetailsProfession.TRADER_DETAILS_PROFESSION);
    }

    /**
     * Create a detached, initialised TraderDetailsProfessionRecord
     */
    @ConstructorProperties({ "traderId", "professionId", "createdOn", "updatedOn" })
    public TraderDetailsProfessionRecord(Integer traderId, Integer professionId, LocalDateTime createdOn, LocalDateTime updatedOn) {
        super(TraderDetailsProfession.TRADER_DETAILS_PROFESSION);

        setTraderId(traderId);
        setProfessionId(professionId);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised TraderDetailsProfessionRecord
     */
    @ConstructorProperties({ "traderId", "professionId", "createdOn", "updatedOn" })
    public TraderDetailsProfessionRecord(com.dreamjob.db.jooq.tables.pojos.TraderDetailsProfession value) {
        super(TraderDetailsProfession.TRADER_DETAILS_PROFESSION);

        if (value != null) {
            setTraderId(value.getTraderId());
            setProfessionId(value.getProfessionId());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
}

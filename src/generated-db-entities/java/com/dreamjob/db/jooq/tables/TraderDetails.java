/*
 * This file is generated by jOOQ.
 */
package com.dreamjob.db.jooq.tables;


import com.dreamjob.db.jooq.DefaultSchema;
import com.dreamjob.db.jooq.Indexes;
import com.dreamjob.db.jooq.Keys;
import com.dreamjob.db.jooq.tables.records.TraderDetailsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TraderDetails extends TableImpl<TraderDetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trader_details</code>
     */
    public static final TraderDetails TRADER_DETAILS = new TraderDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TraderDetailsRecord> getRecordType() {
        return TraderDetailsRecord.class;
    }

    /**
     * The column <code>trader_details.id</code>.
     */
    public final TableField<TraderDetailsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>trader_details.user_id</code>.
     */
    public final TableField<TraderDetailsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trader_details.profession_id</code>.
     */
    public final TableField<TraderDetailsRecord, Integer> PROFESSION_ID = createField(DSL.name("profession_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>trader_details.mobile_number</code>.
     */
    public final TableField<TraderDetailsRecord, String> MOBILE_NUMBER = createField(DSL.name("mobile_number"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>trader_details.description</code>.
     */
    public final TableField<TraderDetailsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private TraderDetails(Name alias, Table<TraderDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TraderDetails(Name alias, Table<TraderDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trader_details</code> table reference
     */
    public TraderDetails(String alias) {
        this(DSL.name(alias), TRADER_DETAILS);
    }

    /**
     * Create an aliased <code>trader_details</code> table reference
     */
    public TraderDetails(Name alias) {
        this(alias, TRADER_DETAILS);
    }

    /**
     * Create a <code>trader_details</code> table reference
     */
    public TraderDetails() {
        this(DSL.name("trader_details"), null);
    }

    public <O extends Record> TraderDetails(Table<O> child, ForeignKey<O, TraderDetailsRecord> key) {
        super(child, key, TRADER_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRADER_DETAILS_PROFESSION_TYPE_ID, Indexes.IDX_TRADER_DETAILS_USER_DETAILS_ID);
    }

    @Override
    public Identity<TraderDetailsRecord, Integer> getIdentity() {
        return (Identity<TraderDetailsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TraderDetailsRecord> getPrimaryKey() {
        return Keys.TRADER_DETAILS_PKEY;
    }

    @Override
    public List<ForeignKey<TraderDetailsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRADER_DETAILS__FK_TRADER_DETAILS_USER_DETAILS_ID, Keys.TRADER_DETAILS__FK_TRADER_DETAILS_PROFESSION_TYPE_ID);
    }

    private transient UserDetails _userDetails;
    private transient ProfessionType _professionType;

    /**
     * Get the implicit join path to the <code>public.user_details</code> table.
     */
    public UserDetails userDetails() {
        if (_userDetails == null)
            _userDetails = new UserDetails(this, Keys.TRADER_DETAILS__FK_TRADER_DETAILS_USER_DETAILS_ID);

        return _userDetails;
    }

    /**
     * Get the implicit join path to the <code>public.profession_type</code>
     * table.
     */
    public ProfessionType professionType() {
        if (_professionType == null)
            _professionType = new ProfessionType(this, Keys.TRADER_DETAILS__FK_TRADER_DETAILS_PROFESSION_TYPE_ID);

        return _professionType;
    }

    @Override
    public TraderDetails as(String alias) {
        return new TraderDetails(DSL.name(alias), this);
    }

    @Override
    public TraderDetails as(Name alias) {
        return new TraderDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TraderDetails rename(String name) {
        return new TraderDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TraderDetails rename(Name name) {
        return new TraderDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

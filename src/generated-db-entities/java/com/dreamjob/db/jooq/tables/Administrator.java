/*
 * This file is generated by jOOQ.
 */
package com.dreamjob.db.jooq.tables;


import com.dreamjob.db.jooq.DefaultSchema;
import com.dreamjob.db.jooq.Keys;
import com.dreamjob.db.jooq.tables.records.AdministratorRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Administrator extends TableImpl<AdministratorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>administrator</code>
     */
    public static final Administrator ADMINISTRATOR = new Administrator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdministratorRecord> getRecordType() {
        return AdministratorRecord.class;
    }

    /**
     * The column <code>administrator.id</code>.
     */
    public final TableField<AdministratorRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>administrator.username</code>.
     */
    public final TableField<AdministratorRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>administrator.email</code>.
     */
    public final TableField<AdministratorRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>administrator.password</code>.
     */
    public final TableField<AdministratorRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>administrator.created_on</code>.
     */
    public final TableField<AdministratorRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>administrator.updated_on</code>.
     */
    public final TableField<AdministratorRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    private Administrator(Name alias, Table<AdministratorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Administrator(Name alias, Table<AdministratorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>administrator</code> table reference
     */
    public Administrator(String alias) {
        this(DSL.name(alias), ADMINISTRATOR);
    }

    /**
     * Create an aliased <code>administrator</code> table reference
     */
    public Administrator(Name alias) {
        this(alias, ADMINISTRATOR);
    }

    /**
     * Create a <code>administrator</code> table reference
     */
    public Administrator() {
        this(DSL.name("administrator"), null);
    }

    public <O extends Record> Administrator(Table<O> child, ForeignKey<O, AdministratorRecord> key) {
        super(child, key, ADMINISTRATOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AdministratorRecord, Integer> getIdentity() {
        return (Identity<AdministratorRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdministratorRecord> getPrimaryKey() {
        return Keys.ADMINISTRATOR_PKEY;
    }

    @Override
    public List<UniqueKey<AdministratorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ADMINISTRATOR_USERNAME_KEY, Keys.ADMINISTRATOR_EMAIL_KEY);
    }

    @Override
    public Administrator as(String alias) {
        return new Administrator(DSL.name(alias), this);
    }

    @Override
    public Administrator as(Name alias) {
        return new Administrator(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Administrator rename(String name) {
        return new Administrator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Administrator rename(Name name) {
        return new Administrator(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

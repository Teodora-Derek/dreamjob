/*
 * This file is generated by jOOQ.
 */
package com.dreamjob.db.jooq.tables.daos;


import com.dreamjob.db.jooq.tables.City;
import com.dreamjob.db.jooq.tables.records.CityRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CityDao extends DAOImpl<CityRecord, com.dreamjob.db.jooq.tables.pojos.City, Integer> {

    /**
     * Create a new CityDao without any configuration
     */
    public CityDao() {
        super(City.CITY, com.dreamjob.db.jooq.tables.pojos.City.class);
    }

    /**
     * Create a new CityDao with an attached configuration
     */
    @Autowired
    public CityDao(Configuration configuration) {
        super(City.CITY, com.dreamjob.db.jooq.tables.pojos.City.class, configuration);
    }

    @Override
    public Integer getId(com.dreamjob.db.jooq.tables.pojos.City object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(City.CITY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchById(Integer... values) {
        return fetch(City.CITY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.dreamjob.db.jooq.tables.pojos.City fetchOneById(Integer value) {
        return fetchOne(City.CITY.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.dreamjob.db.jooq.tables.pojos.City> fetchOptionalById(Integer value) {
        return fetchOptional(City.CITY.ID, value);
    }

    /**
     * Fetch records that have <code>city_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchRangeOfCityName(String lowerInclusive, String upperInclusive) {
        return fetchRange(City.CITY.CITY_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city_name IN (values)</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchByCityName(String... values) {
        return fetch(City.CITY.CITY_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>city_name = value</code>
     */
    public com.dreamjob.db.jooq.tables.pojos.City fetchOneByCityName(String value) {
        return fetchOne(City.CITY.CITY_NAME, value);
    }

    /**
     * Fetch a unique record that has <code>city_name = value</code>
     */
    public Optional<com.dreamjob.db.jooq.tables.pojos.City> fetchOptionalByCityName(String value) {
        return fetchOptional(City.CITY.CITY_NAME, value);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(City.CITY.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchByStatus(String... values) {
        return fetch(City.CITY.STATUS, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchRangeOfCreatedOn(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(City.CITY.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchByCreatedOn(LocalDateTime... values) {
        return fetch(City.CITY.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchRangeOfUpdatedOn(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(City.CITY.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    public List<com.dreamjob.db.jooq.tables.pojos.City> fetchByUpdatedOn(LocalDateTime... values) {
        return fetch(City.CITY.UPDATED_ON, values);
    }
}

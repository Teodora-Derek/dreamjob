/*
 * This file is generated by jOOQ.
 */
package com.dreamjob.db.jooq.tables;


import com.dreamjob.db.jooq.DefaultSchema;
import com.dreamjob.db.jooq.Indexes;
import com.dreamjob.db.jooq.Keys;
import com.dreamjob.db.jooq.tables.records.OfferRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offer extends TableImpl<OfferRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>offer</code>
     */
    public static final Offer OFFER = new Offer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfferRecord> getRecordType() {
        return OfferRecord.class;
    }

    /**
     * The column <code>offer.id</code>.
     */
    public final TableField<OfferRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>offer.trader_id</code>.
     */
    public final TableField<OfferRecord, Integer> TRADER_ID = createField(DSL.name("trader_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>offer.city_id</code>.
     */
    public final TableField<OfferRecord, Integer> CITY_ID = createField(DSL.name("city_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>offer.profession_id</code>.
     */
    public final TableField<OfferRecord, Integer> PROFESSION_ID = createField(DSL.name("profession_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>offer.price_unit</code>.
     */
    public final TableField<OfferRecord, String> PRICE_UNIT = createField(DSL.name("price_unit"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>offer.wage_per_price_unit</code>.
     */
    public final TableField<OfferRecord, BigDecimal> WAGE_PER_PRICE_UNIT = createField(DSL.name("wage_per_price_unit"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>offer.description</code>.
     */
    public final TableField<OfferRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>offer.status</code>.
     */
    public final TableField<OfferRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>offer.created_on</code>.
     */
    public final TableField<OfferRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>offer.updated_on</code>.
     */
    public final TableField<OfferRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    private Offer(Name alias, Table<OfferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Offer(Name alias, Table<OfferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>offer</code> table reference
     */
    public Offer(String alias) {
        this(DSL.name(alias), OFFER);
    }

    /**
     * Create an aliased <code>offer</code> table reference
     */
    public Offer(Name alias) {
        this(alias, OFFER);
    }

    /**
     * Create a <code>offer</code> table reference
     */
    public Offer() {
        this(DSL.name("offer"), null);
    }

    public <O extends Record> Offer(Table<O> child, ForeignKey<O, OfferRecord> key) {
        super(child, key, OFFER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_OFFER_CITY_ID, Indexes.IDX_OFFER_PROFESSION_ID, Indexes.IDX_OFFER_STATUS, Indexes.IDX_OFFER_TRADER_ID, Indexes.IDX_OFFER_WAGE_PER_PRICE_UNIT);
    }

    @Override
    public Identity<OfferRecord, Integer> getIdentity() {
        return (Identity<OfferRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OfferRecord> getPrimaryKey() {
        return Keys.OFFER_PKEY;
    }

    @Override
    public List<ForeignKey<OfferRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OFFER__FK_OFFER_TRADER_DETAILS_ID, Keys.OFFER__FK_OFFER_CITY_ID, Keys.OFFER__FK_OFFER_PROFESSION_ID);
    }

    private transient TraderDetails _traderDetails;
    private transient City _city;
    private transient Profession _profession;

    /**
     * Get the implicit join path to the <code>public.trader_details</code>
     * table.
     */
    public TraderDetails traderDetails() {
        if (_traderDetails == null)
            _traderDetails = new TraderDetails(this, Keys.OFFER__FK_OFFER_TRADER_DETAILS_ID);

        return _traderDetails;
    }

    /**
     * Get the implicit join path to the <code>public.city</code> table.
     */
    public City city() {
        if (_city == null)
            _city = new City(this, Keys.OFFER__FK_OFFER_CITY_ID);

        return _city;
    }

    /**
     * Get the implicit join path to the <code>public.profession</code> table.
     */
    public Profession profession() {
        if (_profession == null)
            _profession = new Profession(this, Keys.OFFER__FK_OFFER_PROFESSION_ID);

        return _profession;
    }

    @Override
    public Offer as(String alias) {
        return new Offer(DSL.name(alias), this);
    }

    @Override
    public Offer as(Name alias) {
        return new Offer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offer rename(String name) {
        return new Offer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offer rename(Name name) {
        return new Offer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, Integer, Integer, String, BigDecimal, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
